---
kind: pipeline
name: default
type: kubernetes

environment:
  APP_NAME: nrm
  PROD_ENV: ms-prod
  STG_ENV: ms-stg
  UAT_ENV: ms-dev
  BRANCH_ENV: ms-branch
  PRODUCTION_URL: www.modernslavery.gov.uk
  IMAGE_URL: quay.io/ukhomeofficedigital
  IMAGE_REPO: modern-slavery
  GIT_REPO: UKHomeOffice/modern-slavery
  HOF_CONFIG: hof-services-config/Modern_Slavery_Nrm
  NON_PROD_AVAILABILITY: Mon-Fri 08:00-23:00 Europe/London
  READY_FOR_TEST_DELAY: 20s

trigger:
  branch:
    - feature/*
    - master

linting: &linting
  pull: if-not-exists
  image: node:14
  commands:
  - npm run lint

unit_tests: &unit_tests
  pull: if-not-exists
  image: node:14
  commands:
  - npm run test:unit

steps:
  - name: clone_repos
    image: alpine/git
    environment:
      DRONE_GITHUB_USERNAME:
        from_secret: DRONE_GITHUB_USERNAME
      DRONE_GITHUB_TOKEN:
        from_secret: DRONE_GITHUB_TOKEN
    commands:
      - git clone https://$${DRONE_GITHUB_USERNAME}:$${DRONE_GITHUB_TOKEN}@github.com/UKHomeOfficeForms/hof-services-config.git
    when:
      branch:
        include:
        - master
        - feature/*
      event: [push, pull_request]
  
  - name: setup
    pull: if-not-exists
    image: node:14
    commands:
    - npm ci
    - npm run postinstall
    when:
      branch:
        include:
        - master
        - feature/*
      event: [push, pull_request]

  - name: linting_deploy
    <<: *linting
    when:
      branch:
        include:
        - master
        - feature/*
      event: push

  - name: build_image
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
    commands:
      - docker build --no-cache -t $${IMAGE_REPO}:$${DRONE_COMMIT_SHA} .
    volumes:
      - name: dockersock
        path: /var/run
    when:
      branch: master
      event: [push, pull_request]

  - name: image_to_quay
    pull: if-not-exists
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
    environment:
      DOCKER_PASSWORD:
        from_secret: DOCKER_PASSWORD
    commands:
      - docker login -u="ukhomeofficedigital+modern_slavery_bot" -p=$${DOCKER_PASSWORD} quay.io
      - docker tag $${IMAGE_REPO}:$${DRONE_COMMIT_SHA} $${IMAGE_URL}/$${IMAGE_REPO}:$${DRONE_COMMIT_SHA}
      - docker push $${IMAGE_URL}/$${IMAGE_REPO}:$${DRONE_COMMIT_SHA}
    when:
      branch: master
      event: [push, pull_request]

  # Deploy to Master UAT environment
  - name: deploy_to_branch
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER:
        from_secret: KUBE_SERVER_DEV
      DRONE_KUBE_TOKEN:
        from_secret: DRONE_KUBE_TOKEN
    commands:
      - export KUBE_TOKEN=$${DRONE_KUBE_TOKEN}
      - export KUBE_NAMESPACE=$${BRANCH_ENV}
      - export INGRESS_INTERNAL_ANNOTATIONS=$${HOF_CONFIG}/ingress-internal-annotations.yaml
      - export CONFIGMAP_VALUES=$${HOF_CONFIG}/configmap-values.yaml
      - export NGINX_SETTINGS=$${HOF_CONFIG}/nginx-settings.yaml
      - export DRONE_SOURCE_BRANCH=$(echo $${DRONE_SOURCE_BRANCH} | tr '[:upper:]' '[:lower:]')
      - kd --insecure-skip-tls-verify --check-interval 10s -f kube/redis-service.yaml -f kube/redis-network-policy.yaml -f kube/redis-deployment.yaml
      - kd --insecure-skip-tls-verify -f kube/configmap.yaml -f kube/ingress-internal.yaml -f kube/networkpolicy-internal.yaml -f kube/service.yaml
      - kd --insecure-skip-tls-verify -f kube/ingress-external.yaml -f kube/networkpolicy-external.yaml
      - kd --insecure-skip-tls-verify --timeout 10m --check-interval 10s -f kube/deployment.yaml
      - sleep $${READY_FOR_TEST_DELAY}
      - echo "UAT Branch - $${APP_NAME}-$${DRONE_SOURCE_BRANCH}.branch.internal.ms-notprod.homeoffice.gov.uk"
    when:
      branch: master
      event: pull_request

  # Deploy to a branch via a pull request
  # - name: deploy_to_branch
  #   pull: if-not-exists
  #   image: quay.io/ukhomeofficedigital/kd:v1.14.0
  #   environment:
  #     KUBE_SERVER_DEV:
  #       from_secret: KUBE_SERVER_DEV
  #     DRONE_KUBE_TOKEN:
  #       from_secret: DRONE_KUBE_TOKEN
  #   commands:
  #     - export KUBE_TOKEN=$${DRONE_KUBE_TOKEN}
  #     - export KUBE_NAMESPACE=ms-dev
  #     # - export KUBE_SERVER_DEV=$${KUBE_SERVER_DEV}
  #     # - export KUBE_TOKEN_DEV=$${DRONE_KUBE_TOKEN}
  #     - export INGRESS_INTERNAL_ANNOTATIONS=$${HOF_CONFIG}/ingress-internal-annotations.yaml
  #     - export CONFIGMAP_VALUES=$${HOF_CONFIG}/configmap-values.yaml
  #     - export NGINX_SETTINGS=$${HOF_CONFIG}/nginx-settings.yaml
  #     - export DRONE_SOURCE_BRANCH=$(echo $${DRONE_SOURCE_BRANCH} | tr '[:upper:]' '[:lower:]')
  #     # - kubectl auth can-i create deployments --namespace ms-branch
  #     - kubectl get pods --namespace ms-dev
  #     # - kd --insecure-skip-tls-verify --check-interval 10s -f kube/redis-service.yaml -f kube/redis-network-policy.yaml -f kube/redis-deployment.yaml
  #     # - kd --insecure-skip-tls-verify -f kube/configmap.yaml -f kube/ingress-internal.yaml -f kube/networkpolicy-internal.yaml -f kube/service.yaml
  #     # - kd --insecure-skip-tls-verify --timeout 10m --check-interval 10s -f kube/deployment.yaml
  #     - sleep $${READY_FOR_TEST_DELAY}
  #     - echo "UAT Branch - $${APP_NAME}-$${DRONE_SOURCE_BRANCH}.branch.internal.ms-notprod.homeoffice.gov.uk"
  #   when:
  #     branch: master
  #     event: pull_request
  
  # - name: linting_branch
  #   <<: *linting
  #   when:
  #     branch:
  #       include:
  #         - master
  #         - feature/*
  #     event: pull_request
  
  # Deploy to Master UAT environment
  - name: deploy_to_dev
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    # environment:
    #   KUBE_SERVER:
    #     from_secret: KUBE_SERVER_DEV
    #   DRONE_KUBE_TOKEN:
    #     from_secret: DRONE_KUBE_TOKEN
    commands:
      - export KUBE_TOKEN=$${DRONE_KUBE_TOKEN}
      - export KUBE_TOKEN_DEV=$${DRONE_KUBE_TOKEN}
      - export KUBE_NAMESPACE=ms-dev
      - export INGRESS_INTERNAL_ANNOTATIONS=$${HOF_CONFIG}/ingress-internal-annotations.yaml
      - export CONFIGMAP_VALUES=$${HOF_CONFIG}/configmap-values.yaml
      - export NGINX_SETTINGS=$${HOF_CONFIG}/nginx-settings.yaml
      - kd --insecure-skip-tls-verify --check-interval 10s -f kube/redis-service.yaml -f kube/redis-network-policy.yaml -f kube/redis-deployment.yaml
      - kd --insecure-skip-tls-verify -f kube/configmap.yaml -f kube/ingress-internal.yaml -f kube/networkpolicy-internal.yaml -f kube/service.yaml
      - kd --insecure-skip-tls-verify -f kube/ingress-external.yaml -f kube/networkpolicy-external.yaml
      - kd --insecure-skip-tls-verify --timeout 10m --check-interval 10s -f kube/deployment.yaml
      - sleep $${READY_FOR_TEST_DELAY}
    when:
      branch: master
      event: push

  # Get pull request branch so correct PR UAT environment is torn down in the tear_down_branch step that follows
  - name: get_pr_branch
    pull: if-not-exists
    image: drone/cli:alpine@sha256:14409f7f7247befb9dd2effdb2f61ac40d1f5fbfb1a80566cf6f2f8d21f3be11
    environment:
      DRONE_SERVER:
        from_secret: drone_server
      DRONE_TOKEN:
        from_secret: drone_token
    volumes:
      - name: dockersock
        path: /root/.dockersock
    commands:
      - drone build info $GIT_REPO $DRONE_BUILD_NUMBER --format {{.Message}} | grep -o " '.*' " | tr -d "[ ']" | tr '[:upper:]' '[:lower:]' > /root/.dockersock/branch_name.txt
    when:
      branch: master
      event: push

  # Tear down pull request UAT environment
  - name: tear_down_branch
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER_DEV:
        from_secret: KUBE_SERVER_DEV
      DRONE_NOTPROD_TOKEN:
        from_secret: DRONE_NOTPROD_TOKEN
    volumes:
      - name: dockersock
        path: /root/.dockersock
    commands:
      - export KUBE_TOKEN=$${DRONE_NOTPROD_TOKEN}
      - export KUBE_NAMESPACE=$${BRANCH_ENV}
      - export INGRESS_INTERNAL_ANNOTATIONS=$${HOF_CONFIG}/ingress-internal-annotations.yaml
      - export CONFIGMAP_VALUES=$${HOF_CONFIG}/configmap-values.yaml
      - export NGINX_SETTINGS=$${HOF_CONFIG}/nginx-settings.yaml
      - export DRONE_SOURCE_BRANCH=$(cat /root/.dockersock/branch_name.txt)
      - kubectl="kubectl --insecure-skip-tls-verify --server=$${KUBE_SERVER} --namespace=$${KUBE_NAMESPACE} --token=$${KUBE_TOKEN}"
      - kd --delete --insecure-skip-tls-verify --check-interval 10s -f kube/redis-service.yaml -f kube/redis-network-policy.yaml -f kube/redis-deployment.yaml
      - kd --delete --insecure-skip-tls-verify -f kube/configmap.yaml -f kube/ingress-internal.yaml -f kube/networkpolicy-internal.yaml -f kube/service.yaml
      - kd --delete --insecure-skip-tls-verify --timeout 10m --check-interval 10s -f kube/deployment.yaml
      - $${kubectl} delete secret $${APP_NAME}-internal-$${DRONE_SOURCE_BRANCH} --ignore-not-found=true
      - echo "Torn Down UAT Branch - $${APP_NAME}-$${DRONE_SOURCE_BRANCH}.branch.internal.ms-notprod.homeoffice.gov.uk"
    when:
      branch: master
      event: push

    # Deploy to Staging environment
  - name: deploy_to_stg
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER:
        from_secret: KUBE_SERVER_STG
      KUBE_TOKEN_GRO_ACP_PROD:
        from_secret: KUBE_TOKEN_STG
    commands:
      - export KUBE_TOKEN=$${KUBE_TOKEN_STG}
      - export KUBE_NAMESPACE=$${STG_ENV}
      - export INGRESS_INTERNAL_ANNOTATIONS=$${HOF_CONFIG}/ingress-internal-annotations.yaml
      - export CONFIGMAP_VALUES=$${HOF_CONFIG}/configmap-values.yaml
      - export NGINX_SETTINGS=$${HOF_CONFIG}/nginx-settings.yaml
      - kd --insecure-skip-tls-verify --check-interval 10s -f kube/redis-service.yaml -f kube/redis-network-policy.yaml -f kube/redis-deployment.yaml
      - kd --insecure-skip-tls-verify -f kube/configmap.yaml -f kube/ingress-internal.yaml -f kube/networkpolicy-internal.yaml -f kube/service.yaml
      - kd --insecure-skip-tls-verify --timeout 10m --check-interval 10s -f kube/deployment.yaml
      - sleep $${READY_FOR_TEST_DELAY}
    when:
      branch: master
      event: push

# Checks a build being promoted has passed, is on master which effectively means a healthy build on Staging
  - name: sanity_check_build_prod
    pull: if-not-exists
    image: drone/cli:alpine@sha256:14409f7f7247befb9dd2effdb2f61ac40d1f5fbfb1a80566cf6f2f8d21f3be11
    environment:
      DRONE_SERVER:
        from_secret: drone_server
      DRONE_TOKEN:
        from_secret: drone_token
    commands:
      - export STATUS=$(drone build info $GIT_REPO $DRONE_BUILD_PARENT --format {{.Status}})
      - export BRANCH=$(drone build info $GIT_REPO $DRONE_BUILD_PARENT --format {{.Target}})
      - export EVENT=$(drone build info $GIT_REPO $DRONE_BUILD_PARENT --format {{.Event}})
      - export REFS=$(drone build info $GIT_REPO $DRONE_BUILD_PARENT --format {{.Ref}})
      - if [[ "$STATUS" != "success" || "$BRANCH" != "master" || "$EVENT" != "push" || "$REFS" != "refs/heads/master" ]] ; then return 1; else return 0 ; fi
    when:
      target: PROD

  - name: clone_repos_prod
    image: alpine/git
    environment:
      DRONE_GITHUB_USERNAME:
        from_secret: DRONE_GITHUB_USERNAME
      DRONE_GITHUB_TOKEN:
        from_secret: DRONE_GITHUB_TOKEN
    commands:
      - git clone https://$${DRONE_GITHUB_USERNAME}:$${DRONE_GITHUB_TOKEN}@github.com/UKHomeOfficeForms/hof-services-config.git
    when:
      target: PROD
      event: promote

    # Deploy to Production environment
  - name: deploy_to_prod
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER:
        from_secret: KUBE_SERVER_PROD
      KUBE_TOKEN_GRO_ACP_PROD:
        from_secret: KUBE_TOKEN_PROD
    commands:
      - export KUBE_TOKEN=$${KUBE_TOKEN_PROD}
      - export KUBE_NAMESPACE=$${PROD_ENV}
      - export INGRESS_EXTERNAL_ANNOTATIONS=$${HOF_CONFIG}/ingress-external-annotations.yaml
      - export CONFIGMAP_VALUES=$${HOF_CONFIG}/configmap-values.yaml
      - export NGINX_SETTINGS=$${HOF_CONFIG}/nginx-settings.yaml
      - kd --insecure-skip-tls-verify --check-interval 10s -f kube/redis-service.yaml -f kube/redis-network-policy.yaml -f kube/redis-deployment.yaml
      - kd --insecure-skip-tls-verify -f kube/configmap.yaml -f kube/ingress-external.yaml -f kube/networkpolicy-external.yaml -f kube/service.yaml
      - kd --insecure-skip-tls-verify --timeout 10m --check-interval 10s -f kube/deployment.yaml
      - sleep $${READY_FOR_TEST_DELAY}
    when:
      target: PROD
      event: promote

# CRON job step that tears down our pull request UAT environments
  - name: cron_tear_down
    pull: if-not-exists
    image: quay.io/ukhomeofficedigital/kd:v1.14.0
    environment:
      KUBE_SERVER:
        from_secret: KUBE_SERVER_DEV
      KUBE_TOKEN_GRO_ACP_NOTPROD:
        from_secret: DRONE_NOTPROD_TOKEN
    commands:
      - export KUBE_TOKEN=$${DRONE_NOTPROD_TOKEN}
      - export KUBE_NAMESPACE=$${BRANCH_ENV}
      - ./clean_up.sh
    when:
      cron: tear_down_pr_envs
      event: cron

  # CRON job steps that runs security scans using Snyk & Anchore
  - name: cron_clone_repos
    image: alpine/git
    environment:
      DRONE_GITHUB_USERNAME:
        from_secret: DRONE_GITHUB_USERNAME
      DRONE_GITHUB_TOKEN:
        from_secret: DRONE_GITHUB_TOKEN
    commands:
      - git clone https://$${DRONE_GITHUB_USERNAME}:$${DRONE_GITHUB_TOKEN}@github.com/UKHomeOfficeForms/hof-services-config.git
    when:
      cron: security_scans
      event: cron

  - name: cron_build_image
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
    commands:
      - docker build --no-cache -t $${IMAGE_REPO}:$${DRONE_COMMIT_SHA} .
    volumes:
      - name: dockersock
        path: /var/run
    when:
      cron: security_scans
      event: cron

  # Slack notification upon a CRON job fail
  - name: cron_notify_slack_tear_down_pr_envs
    pull: if-not-exists
    image: plugins/slack
    settings:
      channel: sas-build
      failure: ignore
      icon_url: http://readme.drone.io/0.5/logo_dark.svg
      icon.url: http://readme.drone.io/0.5/logo_dark.svg
      template: "CRON Job {{build.deployTo}} of GRO has {{build.status}} - <{{build.link}}|#{{build.number}}> {{#success build.status}}\n  :thumbsup: :thumbsup: :thumbsup:\n{{else}}\n  :x: :x: :x:\n{{/success}} Author: {{build.author}}\n\nDuration: {{since job.started}}\n\nJob: <{{build.link}}|#{{build.number}}>\n\nCommit: {{build.commit}}\n"
      username: Drone
      webhook:
        from_secret: slack_webhook
    when:
      cron: tear_down_pr_envs
      event: cron
      status: failure

services:
  - name: docker
    image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind

  # Redis session setup in background so integration tests can run
  - name: session
    image: redis
    volumes:
      - name: dockersock
        path: /var/run

volumes:
  - name: dockersock
    temp: {}
...
# steps:
# - name: build
#   pull: if-not-exists
#   image: node:12
#   commands:
#   - npm --loglevel warn install
#   - npm run test
#   when:
#     branch: [ master, feature/* ]
#     event: push

# - name: build_modern_slavery
#   pull: if-not-exists
#   image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
#   commands:
#   - n=0; while [ "$n" -lt 60 ] && [ ! docker stats --no-stream ]; do n=$(( n + 1 )); sleep 1; done
#   - docker build -t app-$${DRONE_COMMIT_SHA} .
#   when:
#     branch: [ master, feature/* ]
#     event: push

# - name: image_to_quay
#   pull: if-not-exists
#   image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
#   environment:
#     DOCKER_PASSWORD:
#       from_secret: DOCKER_PASSWORD
#     DOCKER_USERNAME: ukhomeofficedigital+modern_slavery_bot
#   commands:
#     - n=0; while [ "$n" -lt 60 ] && [ ! docker stats --no-stream ]; do n=$(( n + 1 )); sleep 1; done
#     - docker login -u="ukhomeofficedigital+modern_slavery_bot" -p=$${DOCKER_PASSWORD} quay.io
#     - docker tag app-$${DRONE_COMMIT_SHA} quay.io/ukhomeofficedigital/modern-slavery:$${DRONE_COMMIT_SHA}
#     - docker tag app-$${DRONE_COMMIT_SHA} quay.io/ukhomeofficedigital/modern-slavery:build-$${DRONE_BUILD_NUMBER}
#     - docker tag app-$${DRONE_COMMIT_SHA} quay.io/ukhomeofficedigital/modern-slavery:latest
#     - docker push quay.io/ukhomeofficedigital/modern-slavery:$${DRONE_COMMIT_SHA}
#     - docker push quay.io/ukhomeofficedigital/modern-slavery:build-$${DRONE_BUILD_NUMBER}
#     - docker push quay.io/ukhomeofficedigital/modern-slavery:latest
#   when:
#     branch: master
#     event: push

# - name: tag_to_quay
#   image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind
#   environment:
#     DOCKER_PASSWORD:
#       from_secret: docker_password
#   commands:
#     - n=0; while [ "$n" -lt 60 ] && [ ! docker stats --no-stream ]; do n=$(( n + 1 )); sleep 1; done
#     - docker login -u="ukhomeofficedigital+modern_slavery_bot" -p=$${DOCKER_PASSWORD} quay.io
#     - docker tag $${DRONE_TAG} quay.io/ukhomeofficedigital/modern-slavery:$${DRONE_TAG}
#     - docker push quay.io/ukhomeofficedigital/modern-slavery:$${DRONE_TAG}
#   when:
#     event: tag

# - name: clone_repo_build
#   pull: if-not-exists
#   image: docker:git
#   environment:
#     DRONE_GITHUB_USERNAME:
#       from_secret: DRONE_GITHUB_USERNAME
#     DRONE_GITHUB_TOKEN:
#       from_secret: DRONE_GITHUB_TOKEN
#   commands:
#     - git clone https://$${DRONE_GITHUB_USERNAME}:$${DRONE_GITHUB_TOKEN}@gitlab.digital.homeoffice.gov.uk/modern-slavery/kube-modern-slavery.git
#     - cd kube-modern-slavery
#     - if ! [ $(git tag -l dev-${DRONE_COMMIT_SHA}) ]; then git tag dev-${DRONE_COMMIT_SHA} && git push origin --tags; fi
#   when:
#     branch: master
#     event: push

# - name: clone_repo_promote
#   pull: if-not-exists
#   image: docker:git
#   environment:
#     DRONE_GITHUB_USERNAME:
#       from_secret: DRONE_GITHUB_USERNAME
#     DRONE_GITHUB_TOKEN:
#       from_secret: DRONE_GITHUB_TOKEN
#   commands:
#     - git clone https://$${DRONE_GITHUB_USERNAME}:$${DRONE_GITHUB_TOKEN}@gitlab.digital.homeoffice.gov.uk/modern-slavery/kube-modern-slavery.git
#     - cd kube-modern-slavery
#     - if ! [ $(git tag -l ${DRONE_DEPLOY_TO}-${DRONE_COMMIT_SHA}) ]; then git tag ${DRONE_DEPLOY_TO}-${DRONE_COMMIT_SHA} && git push origin --tags; fi
#   when:
#     event: promote
#     target: [ uat, preprod, prod ]

# - name: deploy_to_dev
#   pull: if-not-exists
#   image: quay.io/ukhomeofficedigital/kd:v1.14.0
#   commands:
#     - cd kube-modern-slavery
#     - bin/deploy.sh
#   environment:
#     KUBE_SERVER_DEV:
#       from_secret: KUBE_SERVER_DEV
#     KUBE_TOKEN_DEV:
#       from_secret: KUBE_TOKEN_DEV
#     KUBE_NAMESPACE: ms-dev
#     APP_VERSION: ${DRONE_COMMIT_SHA}
#     DATA_SERVICE_VERSION: server-latest
#     ALERT_SERVICE_VERSION: alerts-latest
#     LOOKUP_SERVICE_VERSION: lookup-latest
#   when:
#     branch: master
#     event: push

# - name: deploy_to_uat
#   pull: if-not-exists
#   image: quay.io/ukhomeofficedigital/kd:v1.14.0
#   commands:
#     - cd kube-modern-slavery
#     - bin/deploy.sh
#   environment:
#     KUBE_SERVER_DEV:
#       from_secret: KUBE_SERVER_DEV
#     DRONE_NOTPROD_TOKEN:
#       from_secret: DRONE_NOTPROD_TOKEN
#     KUBE_NAMESPACE: ms-uat
#     APP_VERSION: ${DRONE_COMMIT_SHA}
#   when:
#     event: promote
#     target: uat

# - name: deploy_to_preprod
#   pull: if-not-exists
#   image: quay.io/ukhomeofficedigital/kd:v1.14.0
#   commands:
#     - cd kube-modern-slavery
#     - bin/deploy.sh
#   environment:
#     KUBE_SERVER_DEV:
#       from_secret: KUBE_SERVER_DEV
#     DRONE_NOTPROD_TOKEN:
#       from_secret: DRONE_NOTPROD_TOKEN
#     KUBE_NAMESPACE: ms-preprod
#     APP_VERSION: ${DRONE_COMMIT_SHA}
#     DATA_SERVICE_VERSION: server-dd595377010cdc7417ac72a5ceec568611e99f39
#     ALERT_SERVICE_VERSION: alerts-781c6b21bdd76589f0521e7ec924e8c2e96ac066
#     LOOKUP_SERVICE_VERSION: lookup-5fe0fcdbef24a33c6b24bae83d04a2c7d0482d34
#   when:
#     event: promote
#     target: preprod

# - name: deploy_to_prod
#   pull: if-not-exists
#   image: quay.io/ukhomeofficedigital/kd:v1.14.0
#   commands:
#     - cd kube-modern-slavery
#     - bin/deploy.sh
#   environment:
#     KUBE_SERVER_PROD:
#       from_secret: KUBE_SERVER_PROD
#     KUBE_TOKEN_PROD:
#       from_secret: KUBE_TOKEN_PROD
#     KUBE_NAMESPACE: ms-prod
#     APP_VERSION: ${DRONE_COMMIT_SHA}
#   when:
#     event: promote
#     target: prod

# services:
#   - name: docker
#     image: 340268328991.dkr.ecr.eu-west-2.amazonaws.com/acp/dind

# ...
