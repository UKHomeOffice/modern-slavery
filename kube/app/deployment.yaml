---
apiVersion: apps/v1
kind: Deployment
metadata:
  {{ if eq .KUBE_NAMESPACE .PROD_ENV }}
  name: {{ .APP_NAME }}
  {{ else if eq .KUBE_NAMESPACE .BRANCH_ENV }}
  annotations:
    downscaler/uptime: {{ .NON_PROD_AVAILABILITY }}
  name: {{ .APP_NAME }}-{{ .DRONE_SOURCE_BRANCH }}
  {{ else }}
  annotations:
    downscaler/uptime: {{ .NON_PROD_AVAILABILITY }}
  name: {{ .APP_NAME }}
  {{ end }}
spec:
  {{ if or (eq .KUBE_NAMESPACE .STG_ENV) (eq .KUBE_NAMESPACE .PROD_ENV) }}
  replicas: 2
  {{ else }}
  replicas: 1
  {{ end }}
  selector:
    matchLabels:
      {{ if eq .KUBE_NAMESPACE .BRANCH_ENV }}
      name: {{ .APP_NAME }}-{{ .DRONE_SOURCE_BRANCH }}
      {{ else }}
      name: {{ .APP_NAME }}
      {{ end }}
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8082"
        prometheus.io/path: "/"
      labels:
        {{ if eq .KUBE_NAMESPACE .BRANCH_ENV }}
        name: {{ .APP_NAME }}-{{ .DRONE_SOURCE_BRANCH }}
        app: {{ .APP_NAME }}-{{ .DRONE_SOURCE_BRANCH }}
        service: {{ .APP_NAME }}-{{ .DRONE_SOURCE_BRANCH }}
        {{ else }}
        name: {{ .APP_NAME }}
        app: {{ .APP_NAME }}
        service: {{ .APP_NAME }}
        {{ end }}
    spec:
      containers:
        - name: {{ .APP_NAME }}
          image: {{ .IMAGE_URL }}/{{ .IMAGE_REPO }}:{{.DRONE_COMMIT_SHA}}
          imagePullPolicy: Always
          securityContext:
            runAsNonRoot: true
          ports:
            - containerPort: 8081
          envFrom:
            - configMapRef:
                {{ if eq .KUBE_NAMESPACE .BRANCH_ENV }}
                name: {{ .APP_NAME }}-configmap-{{ .DRONE_SOURCE_BRANCH }}
                {{ else }}
                name: {{ .APP_NAME }}-configmap
                {{ end }}
          env:
            # because some internal services have self signed certs
            - name: LISTEN_HOST
              value: 127.0.0.1
            - name: REDIS_PORT
              value: "6379"
            - name: NODE_TLS_REJECT_UNAUTHORIZED
              value: "0"
            - name: REDIS_HOST
              value: redis
            - name: WRITE_TO_CASEWORK
              {{ if eq .KUBE_NAMESPACE "ms-dev" }}
              value: "false"
              {{ end }}
              {{if eq .KUBE_NAMESPACE "ms-uat"}}
              value: "false"
              {{end}}
              {{if eq .KUBE_NAMESPACE "ms-preprod"}}
              value: "true"
              {{end}}
              {{if eq .KUBE_NAMESPACE "ms-prod"}}
              value: "true"
              {{end}}
            - name: SESSION_SECRET
              valueFrom:
                secretKeyRef:
                  name: session-secret
                  key: session-secret
            - name: NOTIFY_KEY
              valueFrom:
                secretKeyRef:
                  name: notify-key
                  key: notify-key
            - name: AWS_SQS
              valueFrom:
                secretKeyRef:
                  name: aws-sqs
                  key: url
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-sqs
                  key: aws_secret_access_key
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-sqs
                  key: aws_access_key_id
            - name: FIRST_ALERT_TIMEOUT
              value: "21"
            - name: DELETION_TIMEOUT
              value: "28"
            {{if or (eq .KUBE_NAMESPACE "ms-prod") (eq .KUBE_NAMESPACE "ms-preprod")}}
            - name: AUDIT_DB_HOST
              valueFrom:
                secretKeyRef:
                  name: audit-database
                  key: endpoint
            - name: AUDIT_DB_USER
              value: hof
            - name: AUDIT_DB_PASS
              valueFrom:
                secretKeyRef:
                  name: users
                  key: hof
            - name: AUDIT_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: audit-database
                  key: default_db
            - name: AUDIT_DATA
              value: "true"
              {{ end }}
          livenessProbe:
            failureThreshold: 3
            httpGet:
              httpHeaders:
              - name: X-probe
                value: kubelet
              path: /healthz/ping
              port: 8081
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 15
          readinessProbe:
            failureThreshold: 3
            httpGet:
              httpHeaders:
              - name: X-probe
                value: kubelet
              path: /healthz/readiness
              port: 8081
            initialDelaySeconds: 15
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 15
          resources:
            requests:
              memory: 30Mi
              cpu: 30m
            limits:
              memory: 512Mi
              cpu: 600m
          volumeMounts:
            - mountPath: /public
              name: public

        - name: nginx-proxy
          # nginx-proxy-govuk:v4
          image: quay.io/ukhomeofficedigital/nginx-proxy-govuk@sha256:4470064d0b1d20ae08c5fd85551576cb687f342a22d6cb456fda9b2c4ce8c8df
          resources:
            requests:
              memory: 10Mi
              cpu: 10m
            limits:
              cpu: 250m
              memory: 256Mi
          env:
{{ file .NGINX_SETTINGS | indent 12 }}
          ports:
            - containerPort: 10080
            - containerPort: 10443
          volumeMounts:
            - mountPath: /public
              name: public
          securityContext:
            runAsNonRoot: true
      volumes:
        - name: public
          emptyDir: {}
