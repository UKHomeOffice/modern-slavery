---
apiVersion: apps/v1
kind: Deployment
metadata:
  {{ if eq .KUBE_NAMESPACE .BRANCH_ENV }}
  name: app-{{ .DRONE_SOURCE_BRANCH }}
  {{ else }}
  name: app
  {{ end }}
spec:
  {{ if eq .KUBE_NAMESPACE .PROD_ENV }}
  replicas: 3
  {{ else }}
  replicas: 1
  {{ end }}
  selector:
    matchLabels:
      {{ if eq .KUBE_NAMESPACE .BRANCH_ENV }}
      name: app-{{ .DRONE_SOURCE_BRANCH }}
      service: app-{{ .DRONE_SOURCE_BRANCH }}
      {{ else }}
      name: app
      service: app
      {{ end }}
  template:
    metadata:
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8082"
        prometheus.io/path: "/"
      labels:
        {{ if eq .KUBE_NAMESPACE .BRANCH_ENV }}
        name: app-{{ .DRONE_SOURCE_BRANCH }}
        service: app-{{ .DRONE_SOURCE_BRANCH }}
        {{ else }}
        name: app
        service: app
        {{ end }}
        build: "{{.DRONE_BUILD_NUMBER}}"
        commit: "{{.DRONE_COMMIT_SHA}}"
    spec:
      containers:
        - name: app
          image: {{ .IMAGE_URL }}/{{ .IMAGE_REPO }}:{{ .DRONE_COMMIT_SHA }}
          imagePullPolicy: Always
          resources:
            requests:
              memory: 30Mi
              cpu: 30m
            limits:
              memory: 512Mi
              cpu: 600m
          envFrom:
            - configMapRef:
                {{ if eq .KUBE_NAMESPACE .BRANCH_ENV }}
                name: configmap-{{ .DRONE_SOURCE_BRANCH }}
                {{ else }}
                name: configmap
                {{ end }}
          env:
            - name: LISTEN_HOST
              value: 127.0.0.1
            - name: REDIS_PORT
              value: "6379"
            - name: NODE_TLS_REJECT_UNAUTHORIZED
              value: "0"
            - name: REDIS_HOST
              {{ if eq .KUBE_NAMESPACE .BRANCH_ENV }}
              value: redis-{{ .DRONE_SOURCE_BRANCH }}
              {{ else }}
              value: redis
              {{ end }}
            - name: WRITE_TO_CASEWORK
            {{if or (eq .KUBE_NAMESPACE .PROD_ENV) (eq .KUBE_NAMESPACE .STG_ENV) }}
              value: "true"
            {{ else }}
              value: "false"
            {{ end }}
            - name: SESSION_SECRET
              valueFrom:
                secretKeyRef:
                  name: session-secret
                  key: session-secret
            - name: NOTIFY_KEY
              valueFrom:
                secretKeyRef:
                  name: notify-key
                  key: notify-key
            - name: AWS_SQS
              valueFrom:
                secretKeyRef:
                  name: aws-sqs
                  key: url
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-sqs
                  key: aws_secret_access_key
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-sqs
                  key: aws_access_key_id
            {{ if or (eq .KUBE_NAMESPACE .PROD_ENV) (eq .KUBE_NAMESPACE .STG_ENV) }}
            - name: AUDIT_DB_HOST
              valueFrom:
                secretKeyRef:
                  name: audit-database
                  key: endpoint
            - name: AUDIT_DB_USER
              value: hof
            - name: AUDIT_DB_PASS
              valueFrom:
                secretKeyRef:
                  name: users
                  key: hof
            - name: AUDIT_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: audit-database
                  key: default_db
            - name: AUDIT_DATA
              value: "true"
            {{ end }}
          volumeMounts:
            - mountPath: /public
              name: public
          securityContext:
            runAsNonRoot: true
          livenessProbe:
            failureThreshold: 3
            httpGet:
              httpHeaders:
              - name: X-probe
                value: kubelet
              path: /healthz/ping
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 15
          readinessProbe:
            failureThreshold: 3
            httpGet:
              httpHeaders:
              - name: X-probe
                value: kubelet
              path: /healthz/readiness
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 40
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 15

        - name: nginx-proxy
          # nginx-proxy-govuk:v4.1.1
          image: quay.io/ukhomeofficedigital/nginx-proxy@sha256:517bcb2beff4797adf7a1f2bc23a0bc8c80b9d519187ba683f5055b516f72350
          env:
{{ file .NGINX_SETTINGS | indent 12 }}
            - name: PROXY_SERVICE_PORT
              value: "8081"
            - name: STATSD_METRICS
              value: "FALSE"
          ports:
            - containerPort: 10080
            - containerPort: 10443
          volumeMounts:
            - mountPath: /public
              name: public
          securityContext:
            runAsNonRoot: true
          resources:
            requests:
              memory: 10Mi
              cpu: 10m
            limits:
              memory: 256Mi
              cpu: 300m
      volumes:
        - name: public
          emptyDir: {}
