'use strict';

const reqres = require('hof').utils.reqres;
const Behaviour = require('../../../../apps/nrm/behaviours/types-of-exploitation');

describe('/apps/nrm/behaviours/types-of-exploitation', () => {
  it('exports a function', () => {
    expect(Behaviour).to.be.a('function');
  });

  class Base {
    validate() { }
    saveValues() { }
  }

  let req;
  let res;
  let instance;
  let next;
  let TypesOfExploitation;

  describe('validate()', () => {
    beforeEach(() => {
      req = reqres.req();
      res = reqres.res();
      next = sinon.stub();
      TypesOfExploitation = Behaviour(Base);
      instance = new TypesOfExploitation();
      sinon.stub(Base.prototype, 'validate');
    });
    afterEach(() => {
      Base.prototype.validate.restore();
    });

    it('calls the parent method when it finds an exploitation type', async () => {
      req.form = {
        values: {
          'types-of-exploitation-forced-to-work': true
        }
      };

      await instance.validate(req, res, next);
      expect(Base.prototype.validate).to.have.been.called;
    });
  });

  describe('saveValues()', () => {
    beforeEach(() => {
      req = reqres.req();
      res = reqres.res();
      next = sinon.stub();
      TypesOfExploitation = Behaviour(Base);
      instance = new TypesOfExploitation();
      sinon.stub(Base.prototype, 'saveValues');
    });
    afterEach(() => {
      Base.prototype.saveValues.restore();
    });

    it('saves the exploitation types to an array', async () => {
      req.form = {
        values: {
          'types-of-exploitation-forced-to-work': true,
          'types-of-exploitation-wages-taken': true,
          'types-of-exploitation-forced-to-commit-fraud': true,
          'types-of-exploitation-prostitution': true,
          'types-of-exploitation-child-exploitation': true,
          'types-of-exploitation-taken-somewhere': true,
          'types-of-exploitation-forced-to-commit-crime': true,
          'types-of-exploitation-organs-removed': true,
          'types-of-exploitation-unpaid-household-work': true,
          'other-exploitation-details': 'Other exploitation'
        }
      };
      await instance.saveValues(req, res, next);
      expect(Base.prototype.saveValues).to.have.been.called;
      expect(req.form.values['exploitation-types']).to.deep.equal([
        'Forced to work for nothing or almost nothing',
        'Wages taken by force or coercion, such as through control of a bank account',
        'Forced to commit fraud, such as using their identity to claim benefits',
        'Forced into prostitution',
        'Child sexual exploitation',
        'Taken somewhere, held against their will and sexually assaulted',
        'Forced to commit a crime, such as growing cannabis, drug dealing or begging',
        'Organs, such as kidneys, removed against their will',
        'Forced to do unpaid or low paid household work by relatives or strangers',
        'Other exploitation'
      ]);
    });
  });
});
